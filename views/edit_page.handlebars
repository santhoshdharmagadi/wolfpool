<div class="page-header">
	<h2>Please provide the following details so we can find a matching plan</h2>
</div>

<div class="row">
	<div class="col-lg-4">

		<form role="form" action="/savePlan" name="search_create_form" method="POST" id="mainDetailsForm">

			<div class="form-group">
				<label for="date_id">Date</label>
				<input type="date" class="form-control" id="date_id" name="date">
			</div>

			<div class="form-group">
				<label for="time_id">Time</label>
				<input type="time" class="form-control" id="time_id" name="time">
			</div>

			<div class="form-group">
				<label for="source_id">Source <a id="source_umcl">use my current location</a></label>
				<input type="text" class="form-control" id="source_id" name="source" placeholder="Enter Source Address">
			</div>

			<div class="form-group">
				<label for="destination_id">Destination <a id="destination_umcl">use my current location</a></label>
				<input type="text" class="form-control" id="destination_id" name="destination" placeholder="Enter Destination Address">
			</div>

			<div class="form-group">
				<label for="no_of_people_id">Number of people: </label>
				<input type="number" class="form-control" id="no_of_people_id" min="1" max="6" name="no_of_people">
			</div>

            <div class="form-group">
                <label for="no_of_people_id">Gender of riders</label><br>
                <input type="radio" name="gender" value="0" checked>Both<br>
                <input type="radio" name="gender" value="1"> Only Male<br>
                <input type="radio" name="gender" value="2"> Only Female
            </div>

            <div class="form-group">
                <label for="luggage">Luggage</label>
                <input type="number" class="form-control" id="no_of_people_id" min="0" max="4" name="luggage">
            </div>

            <div class="form-group">
                <label>Add additional options to search plan</label>
                <input type="checkbox" id="additional-box" onclick="showSearchOptions()" value="searchOptions" name="searchOptions">
            </div>

            <div id="search-options">
                <div class="form-group">
                    <label for="gender">Gender Preference of other riders in the trip</label><br>
                    <input type="radio" name="gender_preference" value="0" checked> Male<br>
                    <input type="radio" name="gender_preference" value="1"> Female<br>
                    <input type="radio" name="gender_preference" value="2"> Anything is fine
                </div>

                <!--<div class="form-group">-->
                    <!--<label for="luggage">Luggage</label><br>-->
                    <!--<input type="radio" name="luggage" value="0" checked> Zero<br>-->
                    <!--<input type="radio" name="luggage" value="1"> One<br>-->
                    <!--<input type="radio" name="luggage" value="2"> Two-->
                <!--</div>-->

                <div id="max_people" class="form-group">
                    <label for="people">Maximum number of people</label><br>
                    <input type="radio" name="maximum_coPassengers" value="2" checked> two<br>
                    <input type="radio" name="maximum_coPassengers" value="4"> four<br>
                    <input type="radio" name="maximum_coPassengers" value="6"> six
                </div>

                <div class="form-group">
                    <label for="rating">Minimum rating expected</label><br>
                    <input type="radio" name="minimum_rating" value="1" checked> One<br>
                    <input type="radio" name="minimum_rating" value="2" checked> Two<br>
                    <input type="radio" name="minimum_rating" value="3" checked> Three<br>
                    <input type="radio" name="minimum_rating" value="4" checked> Four<br>
                    <input type="radio" name="minimum_rating" value="5" checked> Five<br>
                </div>
            </div>

			<div class="form-group">
				<button type="button" onclick="return getSimilarPlans()" class="btn btn-primary" id="similar_btn">View Similar Plans</button>
				<button id="create-plan" type="submit" class="btn btn-danger">Create a new Plan</button>
			</div>

			<fieldset class="details_src" hidden="true">
				<label>Latitude</label>
				<input name="lat" type="text" value="" id="source_lat">
				<label>Longitude</label>
				<input name="lng" type="text" value="" id="source_long">
			</fieldset>

			<fieldset class="details_dest" hidden="true">
				<label>Latitude</label>
				<input name="lat" type="text" value="" id="dest_lat">
				<label>Longitude</label>
				<input name="lng" type="text" value="" id="dest_long">
			</fieldset>
		</form>

        <!--<button type="button" onclick="window.location.href='/search'" class="btn btn-primary" id="additional_Search">Additional Search Options</button>-->
        <!--<li><a href="/search">Addtional Search Options</a></li>-->
	</div>
	<div class="col-lg-8">
		<div id="map_canvas" style="width: 100%; height:400px;"></div>
	</div>
</div>

<div id="resultsDiv" style="display:none">
	<div class="row">
		<div class="page-header">
			<h1><small>Similar Plans</small></h1>
		</div>
	</div>

	<div class="row">
		<div class="col-lg-12 col-sm-12" id="result">
			<table id="resultTable" class="table table-striped table-bordered table-dark" cellspacing="0" width="100%" border="1">
				<thead>
					<tr>
						<th></th>
						<th hidden="true"></th>
						<th>No.</th>
						<th>Source</th>
						<th>Distance from Source (in miles)</th>
						<th>Destination</th>
						<th>Distance from Destination (in miles)</th>
						<th>Date</th>
						<th>Time (24 hour format)</th>
						<th>Seats occupied</th>
						<th>Vacancy</th>
					</tr>
				</thead>
			</table>

			<div class="form-group">
				<button type="button" onclick="return joinPlan()" class="btn btn-primary">Join Plan</button>
			</div>

		</div>
	</div>
</div>

<script>
	var currLat = 0;
	var currLong = 0;

	var sourceObject;
	var sourceAutocomplete;

	var destinationAutocomplete;
	var destinationObject;

	var marker;
	var map;

	var geocoder = new google.maps.Geocoder;

	$(document).ready(function() {

	    $('#max_people').hide();
        $.ajax({
            type: "GET",
            url: "/get_plan/{{id._id}}",
            async: true,
            success: function (json_data) {
                if(json_data.length != undefined){
                    document.getElementById('time_id').value = `{{id.time}}`;
                    document.getElementById('no_of_people_id').value = `{{id.no_of_people}}`;
					document.getElementById('source_id').value = `{{id.source_id}}`;
                    document.getElementById('source_lat').value = `{{id.source_lat}}`;
                    document.getElementById('source_long').value = `{{id.source_long}}`;
					document.getElementById('destination_id').value = `{{id.destination_id}}`;
                    document.getElementById('dest_lat').value = `{{id.dest_lat}}`;
                    document.getElementById('dest_long').value = `{{id.dest_long}}`;
                    document.getElementById('additional-box').checked = true;
                    showSearchOptions();
               }else{
                    document.getElementById('date_id').value = json_data.date.split("T")[0];
                    document.getElementById('time_id').value = json_data.time;
                    document.getElementById('no_of_people_id').value = json_data.no_of_people;
					document.getElementById('source_id').value = json_data.source_id;
                    document.getElementById('source_lat').value = json_data.source_lat;
                    document.getElementById('source_long').value = json_data.source_long;
					document.getElementById('destination_id').value = json_data.destination_id;
                    document.getElementById('dest_lat').value = json_data.dest_lat;
                    document.getElementById('dest_long').value = json_data.dest_long;
                    document.getElementById('additional-box').checked = true;
                    showSearchOptions();
               }
                
            }, error: function (request, status, error) {
                alert(request.responseText);
                console.log(request.responseText);
            }
        })

		$("#mainDetailsForm").keydown(function(event) {
			if (event.keyCode == 13) {
				event.preventDefault();
				return false;
			}
		});

		$('#create-plan').hide();

		$('#create_btn').hide();

		$('#search-options').hide();

		// Create Map
		map = new google.maps.Map(document.getElementById('map_canvas'), {
			mapTypeControl: false,
			center: {
				lat: 35.7847,
				lng: -78.6821
			},
			zoom: 16
		});

		// Create marker to show on Map
		marker = new google.maps.Marker({
			position: {
				lat: currLat,
				lng: currLong
			},
			animation: google.maps.Animation.DROP,
			map: map
		});

		if (navigator.geolocation) {
			console.log(navigator.geolocation.getCurrentPosition(showPosition));
		} else {
			alert("Geolocation is not supported by this browser.");
		}

		function showPosition(position) {
			currLat = position.coords.latitude;
			currLong = position.coords.longitude;

			// Create and Bind inputs to Map
			sourceAutocomplete = new google.maps.places.Autocomplete(document.getElementById('source_id'));
			destinationAutocomplete = new google.maps.places.Autocomplete(document.getElementById('destination_id'));

			sourceAutocomplete.bindTo('bounds', map);
			destinationAutocomplete.bindTo('bounds', map);

			// Event listeners on place change
			sourceAutocomplete.addListener('place_changed', function() {
				sourceObject = sourceAutocomplete.getPlace();
				map.setCenter(sourceObject.geometry.location);
				marker.setLabel('Source');
				marker.setPosition(sourceObject.geometry.location);
			});

			destinationAutocomplete.addListener('place_changed', function() {
				destinationObject = destinationAutocomplete.getPlace();
				map.setCenter(destinationObject.geometry.location);
				marker.setLabel('Destination');
				marker.setPosition(destinationObject.geometry.location);
			});
		}

		$("#mainDetailsForm").validate({
			rules: {
				date: {
					required: true,
					datecheck: true
				},
				time: {
					required: true,
					timecheck: true
				},
				source: {
					required: true
				},
				destination: {
					required: true,
					notEqual: "#source_id"
				},
				no_of_people: {
					required: true,
					min: 1,
					max: 6
				},

			},
			messages: {
				date: {
					required: "Please enter Date",
					datecheck: "Please enter a valid date"
				},
				time: {
					required: "Please enter Time",
					timecheck: "Please enter a valid date and time combination"
				},
				source: {
					required: "Please enter Source Address"
				},
				destination: {
					required: "Please enter Destination Address",
					notEqual: "Source and Destination Address cannot be same"
				},
				no_of_people: {
					required: "Please enter Number of People",
					min: "Plan should have at least one vacancy",
					max: "Plan can have maximum vacancy of 6 people"
				}
			}
		});

		$.validator.addMethod("datecheck", function(value) {
			var y = new Date();
			if (new Date(value + " 23:59:00") < y) {
				return false;
			}
			return true;
		});

		$.validator.addMethod("timecheck", function(value) {
			var x = document.forms["search_create_form"]["date"].value;
			x = new Date(x + " " + value + ":00");
			var y = new Date();
			if (x < y) {
				return false;
			}
			return true;
		});

		$.validator.addMethod("notEqual", function(value) {
			var x = document.forms["search_create_form"]["source"].value;
			var y = document.forms["search_create_form"]["destination"].value;
			if (x == y) {
				return false;
			}
			return true;
		});

	});

	$('#source_umcl').click(function() {
		geocoder.geocode({
			'location': {
				lat: currLat,
				lng: currLong
			}
		}, function(results, status) {
			if (status === 'OK') {
				if (results[0]) {
					sourceObject = results[0];
					$('#source_id').val(sourceObject.formatted_address);
					map.setCenter(sourceObject.geometry.location);
					marker.setLabel('Source');
					marker.setPosition(sourceObject.geometry.location);
				}
			} else {
				console.log('Geocoder failed due to: ' + status);
			}
		});
	});

	$('#destination_umcl').click(function() {
		geocoder.geocode({
			'location': {
				lat: currLat,
				lng: currLong
			}
		}, function(results, status) {
			if (status === 'OK') {
				if (results[0]) {
					destinationObject = results[0];
					$('#destination_id').val(destinationObject.formatted_address);
					map.setCenter(destinationObject.geometry.location);
					marker.setLabel('Destination');
					marker.setPosition(destinationObject.geometry.location);
				}
			} else {
				console.log('Geocoder failed due to: ' + status);
			}
		});
	});

	function showSearchOptions() {
	    console.log('hello');
	    var options = $('#mainDetailsForm').serialize();
	    console.log(options);
	    if (options.indexOf('searchOptions') >= 0) {
	        $('#search-options').show();
        } else {
            $('#search-options').hide();
        }
    }

    function createPlan() {
	    $.ajax({

        })
    }

	function joinPlan() {

		var plans = document.getElementsByName("similar_plans");
		var selectedPlan;
		for (var i = 0; i < plans.length; i++) {
			if (plans[i].checked == true) {
				selectedPlan = plans[i].id;
				break;
			}
		}

		if (selectedPlan) {
			$.ajax({
				type: "POST",
				dataType: 'text',
				data: {
					"numberOfPeople": document.getElementById("no_of_people_id").value,
					"selectedPlan": selectedPlan
				},
				url: "/joinPlan",
				async: true,
				success: function(data) {
					if (data) {
						window.location.href = data;
					} else {
						alert("There was an error, please refresh and try again.");
					}
				},
				error: function(request, status, error) {
					alert(error);
					console.log(error);
				}
			});
		} else {
			alert("Please select a plan");
		}
	}

	function getSimilarPlans() {
	    console.log($("#mainDetailsForm").serialize());
		if (!$("#mainDetailsForm").valid())
			return false;
		$('#create_btn').hide();
		$('#source_lat').val(sourceObject.geometry.location.lat());
		$('#source_long').val(sourceObject.geometry.location.lng());
		$('#dest_lat').val(destinationObject.geometry.location.lat());
		$('#dest_long').val(destinationObject.geometry.location.lng());

		$.ajax({
			type: "POST",
			dataType: 'json',
			data: $("#mainDetailsForm").serialize(),
			url: "/searchPlan",
			async: true,
			success: function(json_data) {
				if ($.trim(json_data)) {
					var already_there = $("#resultsDiv").is(':visible');
					if (already_there) {
						console.log("already there");
						$('#resultTable').empty();
					} else {
						$("#resultsDiv").show();
					}

					var len = json_data.length;

					for (var i = 0; i < len; i++) {
						item = json_data[i];
						var date_str = item.date.split("T");
						var tr_str = "<tr>" +
							"<td align='center'></td>" +
							"<td align='center' hidden='true'>" + item._id + "</td>" +
							"<td align='center'>" + (i + 1) + "</td>" +
							"<td align='center'>" + item.source_id + "</td>" +
							"<td align='center'>" + item.src_distance + "</td>" +
							"<td align='center'>" + item.destination_id + "</td>" +
							"<td align='center'>" + item.dest_distance + "</td>" +
							"<td align='center'>" + date_str[0] + "</td>" +
							"<td align='center'>" + item.time + "</td>" +
							"<td align='center'>" + item.no_of_people + "</td>" +
							"<td align='center'>" + item.vacancy + "</td>" +
							"</tr>";
						$("#resultTable").append(tr_str);
					}
					$('#resultTable').DataTable({
						columnDefs: [{
							orderable: false,
							render: function(data, type, full, meta) {
								if (type === 'display') {
									//new_data = '<input type="radio" name="similar_plans" id="'+full.toString().split(',')[1]+'" value="' + data + '">';
									new_data = '<input type="radio" name="similar_plans" id="' + full.toString().split(',')[1] + '">';
								}
								return new_data;
							},
							targets: 0
						}],
						select: {
							style: 'os',
							selector: 'td:first-child'
						},
						"bDestroy": true,
						order: [
							[1, 'asc']
						]
					});
				} else {
					$('#resultTable tbody> tr').remove();
					$('#create_btn').show();
                    $('#create-plan').show();
					$('#resultsDiv').hide();
					console.log("Empty JSON data received from PlanController");
				}
			},
			error: function(request, status, error) {
				alert(request.responseText);
				console.log(request.responseText);
			}
		});
	}

    
</script>
